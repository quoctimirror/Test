// Ring Enhancement Utilities for 3D Model Beautification
import * as THREE from "three";

/**
 * TƒÉng c∆∞·ªùng v√† l√†m ƒë·∫πp m√¥ h√¨nh nh·∫´n 3D
 *
 * Ch·ª©c nƒÉng ch√≠nh:
 * - T·ª± ƒë·ªông ph√°t hi·ªán v√† ph√¢n lo·∫°i c√°c ph·∫ßn kim lo·∫°i v√† kim c∆∞∆°ng
 * - √Åp d·ª•ng v·∫≠t li·ªáu v·∫≠t l√Ω ch·∫•t l∆∞·ª£ng cao cho t·ª´ng lo·∫°i v·∫≠t li·ªáu
 * - T·ªëi ∆∞u h√≥a √°nh s√°ng v√† ph·∫£n x·∫° ƒë·ªÉ nh·∫´n tr√¥ng th·∫≠t v√† b·∫Øt m·∫Øt
 * - Lo·∫°i b·ªè c√°c thu·ªôc t√≠nh kh√¥ng c·∫ßn thi·∫øt c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn ch·∫•t l∆∞·ª£ng hi·ªÉn th·ªã
 */
export class RingEnhancer {
  constructor(envMap = null) {
    this.envMap = envMap;
    this.enhancedMeshes = new Set(); // Theo d√µi c√°c mesh ƒë√£ ƒë∆∞·ª£c tƒÉng c∆∞·ªùng
  }

  /**
   * TƒÉng c∆∞·ªùng c√°c mesh kim c∆∞∆°ng trong m√¥ h√¨nh nh·∫´n
   * Ch·ªâ x·ª≠ l√Ω c√°c mesh ƒë∆∞·ª£c ph√°t hi·ªán l√† kim c∆∞∆°ng, kh√¥ng ch·∫°m v√†o kim lo·∫°i
   * @param {THREE.Object3D} model - M√¥ h√¨nh nh·∫´n c·∫ßn tƒÉng c∆∞∆°ng
   * @param {THREE.Texture} envMap - Environment map cho ph·∫£n x·∫° (t√πy ch·ªçn)
   */
  enhanceRingModel(model, envMap = null) {
    if (!model) {
      console.warn("RingEnhancer: Kh√¥ng c√≥ m√¥ h√¨nh ƒë·ªÉ tƒÉng c∆∞·ªùng");
      return;
    }

    if (envMap) {
      this.envMap = envMap;
    }

    console.log("üîß B·∫Øt ƒë·∫ßu tƒÉng c∆∞·ªùng kim c∆∞∆°ng trong nh·∫´n...");

    model.traverse((child) => {
      if (child.isMesh) {
        // Ch·ªâ tƒÉng c∆∞·ªùng c√°c mesh kim c∆∞∆°ng, b·ªè qua kim lo·∫°i
        const materialType = this._detectMaterialType(child);
        if (materialType === "diamond") {
          this._enhanceDiamondMesh(child);
        }
      }
    });

    console.log(
      `‚ú® Ho√†n th√†nh tƒÉng c∆∞·ªùng ${this.enhancedMeshes.size} mesh kim c∆∞∆°ng`
    );
  }

  /**
   * TƒÉng c∆∞·ªùng m·ªôt mesh kim c∆∞∆°ng c·ª• th·ªÉ
   * @private
   */
  _enhanceDiamondMesh(mesh) {
    // Chu·∫©n b·ªã mesh cho vi·ªác tƒÉng c∆∞·ªùng
    this._prepareMeshGeometry(mesh);

    // √Åp d·ª•ng v·∫≠t li·ªáu kim c∆∞∆°ng
    this._applyDiamondMaterial(mesh);
    mesh.userData.isDiamond = true;
    mesh.userData.isMetal = false;

    // T·ªëi ∆∞u h√≥a rendering
    this._optimizeMeshRendering(mesh);

    this.enhancedMeshes.add(mesh);

    console.log(`üíé TƒÉng c∆∞·ªùng kim c∆∞∆°ng: ${mesh.name || "mesh"}`);
  }

  /**
   * Chu·∫©n b·ªã geometry c·ªßa mesh
   * @private
   */
  _prepareMeshGeometry(mesh) {
    // Lo·∫°i b·ªè vertex colors c√≥ th·ªÉ g√¢y xung ƒë·ªôt
    if (mesh.geometry.attributes.color) {
      mesh.geometry.deleteAttribute("color");
    }

    // T√≠nh to√°n l·∫°i normals ƒë·ªÉ c√≥ √°nh s√°ng ch√≠nh x√°c
    mesh.geometry.computeVertexNormals();

    // T·∫Øt shadows ƒë·ªÉ c√≥ hi·ªáu su·∫•t t·ªët h∆°n v·ªõi mirror effect
    mesh.castShadow = false;
    mesh.receiveShadow = false;
  }

  /**
   * Ph√°t hi·ªán lo·∫°i v·∫≠t li·ªáu d·ª±a tr√™n t√™n v√† thu·ªôc t√≠nh
   * @private
   */
  _detectMaterialType(mesh) {
    const name = mesh.name ? mesh.name.toLowerCase() : "";
    const materialName =
      mesh.material && mesh.material.name
        ? mesh.material.name.toLowerCase()
        : "";

    // Ki·ªÉm tra c√°c t·ª´ kh√≥a kim c∆∞∆°ng
    const diamondKeywords = [
      "diamond",
      "gem",
      "stone",
      "crystal",
      "brilliant",
      "round",
      "cut",
      "jewel",
      "precious",
    ];

    const isDiamondByName = diamondKeywords.some(
      (keyword) => name.includes(keyword) || materialName.includes(keyword)
    );

    // Ki·ªÉm tra thu·ªôc t√≠nh v·∫≠t li·ªáu (kim c∆∞∆°ng th∆∞·ªùng trong su·ªët)
    const isDiamondByProperties =
      mesh.material &&
      (mesh.material.transparent ||
        mesh.material.opacity < 1.0 ||
        (mesh.material.color &&
          mesh.material.color.r > 0.8 &&
          mesh.material.color.g > 0.8 &&
          mesh.material.color.b > 0.8));

    return isDiamondByName || isDiamondByProperties ? "diamond" : "metal";
  }

  /**
   * √Åp d·ª•ng v·∫≠t li·ªáu kim c∆∞∆°ng ch·∫•t l∆∞·ª£ng cao
   * T·∫°o hi·ªáu ·ª©ng nh∆∞ opal/moonstone v·ªõi ƒë·ªô trong m·ªù ƒë·∫πp m·∫Øt
   * @private
   */
  _applyDiamondMaterial(mesh) {
    mesh.material = new THREE.MeshPhysicalMaterial({
      // M√†u tr·∫Øng tinh khi·∫øt
      color: 0xffffff,

      // Kh√¥ng ph·∫£i kim lo·∫°i
      metalness: 0.0,

      // ƒê·ªô nh√°m v·ª´a ph·∫£i ƒë·ªÉ t·∫°o hi·ªáu ·ª©ng m·ªù nh∆∞ opal
      roughness: 0.2,

      // Transmission cao cho hi·ªáu ·ª©ng trong su·ªët
      transmission: 0.9,
      transparent: true,
      opacity: 1.0,

      // IOR c·ªßa opal/moonstone (kh√¥ng ph·∫£i kim c∆∞∆°ng)
      ior: 1.45,

      // Ph·∫£n x·∫° v·ª´a ph·∫£i
      reflectivity: 0.5,

      // TƒÉng c∆∞·ªùng environment mapping
      envMapIntensity: 1.5,

      // Clearcoat nh·∫π
      clearcoat: 0.3,
      clearcoatRoughness: 0.2,

      // T·∫°o hi·ªáu ·ª©ng t√°n x·∫° √°nh s√°ng b√™n trong (milky effect)
      thickness: 2.0,
      attenuationColor: new THREE.Color(0xffffff),
      attenuationDistance: 0.5,

      // Render c·∫£ hai m·∫∑t
      side: THREE.DoubleSide,

      // ƒê·∫£m b·∫£o rendering nh·∫•t qu√°n
      flatShading: false,
      vertexColors: false,
    });

    // √Åp d·ª•ng environment map n·∫øu c√≥
    if (this.envMap) {
      mesh.material.envMap = this.envMap;
    }

    mesh.material.needsUpdate = true;

    console.log(
      `üíé √Åp d·ª•ng v·∫≠t li·ªáu kim c∆∞∆°ng opal cho: ${mesh.name || "mesh"}`
    );
  }

  /**
   * √Åp d·ª•ng v·∫≠t li·ªáu kim lo·∫°i ch·∫•t l∆∞·ª£ng cao (rose gold m·∫∑c ƒë·ªãnh)
   * @private
   */
  _applyMetalMaterial(mesh, metalType = "rose-gold") {
    const metalConfigs = {
      "rose-gold": {
        color: 0xeecdae,
        metalness: 1.0,
        roughness: 0.15,
        clearcoat: 1.0,
        clearcoatRoughness: 0.1,
        envMapIntensity: 2.0,
      },
      gold: {
        color: 0xffd700,
        metalness: 0.8,
        roughness: 0.2,
        clearcoat: 0.8,
        clearcoatRoughness: 0.15,
        envMapIntensity: 1.0,
      },
      silver: {
        color: 0xc0c0c0,
        metalness: 0.9,
        roughness: 0.1,
        clearcoat: 0.9,
        clearcoatRoughness: 0.1,
        envMapIntensity: 1.2,
      },
      platinum: {
        color: 0xe5e4e2,
        metalness: 0.9,
        roughness: 0.15,
        clearcoat: 0.85,
        clearcoatRoughness: 0.12,
        envMapIntensity: 1.1,
      },
    };

    const config = metalConfigs[metalType] || metalConfigs["rose-gold"];

    mesh.material = new THREE.MeshPhysicalMaterial({
      color: config.color,
      metalness: config.metalness,
      roughness: config.roughness,
      clearcoat: config.clearcoat,
      clearcoatRoughness: config.clearcoatRoughness,
      envMapIntensity: config.envMapIntensity,
    });

    // √Åp d·ª•ng environment map n·∫øu c√≥
    if (this.envMap) {
      mesh.material.envMap = this.envMap;
    }

    mesh.material.needsUpdate = true;

    console.log(`ü•á √Åp d·ª•ng v·∫≠t li·ªáu ${metalType} cho: ${mesh.name || "mesh"}`);
  }

  /**
   * T·ªëi ∆∞u h√≥a rendering cho mesh
   * @private
   */
  _optimizeMeshRendering(mesh) {
    // T·∫Øt shadows ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi mirror effect
    mesh.castShadow = false;
    mesh.receiveShadow = false;

    // ƒê·∫£m b·∫£o mesh ƒë∆∞·ª£c render v·ªõi ƒë·ªô ∆∞u ti√™n ph√π h·ª£p
    mesh.renderOrder = mesh.userData.isDiamond ? 1 : 0;
  }

  /**
   * L∆∞u √Ω: RingEnhancer ch·ªâ x·ª≠ l√Ω kim c∆∞∆°ng
   * ƒê·ªÉ thay ƒë·ªïi v·∫≠t li·ªáu kim lo·∫°i, c·∫ßn s·ª≠ d·ª•ng c√°c method kh√°c trong ThreeJSViewer
   */
  setMetalMaterial(metalType = "rose-gold") {
    console.warn(
      "RingEnhancer ch·ªâ x·ª≠ l√Ω kim c∆∞∆°ng. S·ª≠ d·ª•ng ThreeJSViewer methods ƒë·ªÉ thay ƒë·ªïi kim lo·∫°i."
    );
  }

  /**
   * √Åp d·ª•ng v·∫≠t li·ªáu kim c∆∞∆°ng ti√™u chu·∫©n (trong su·ªët ho√†n to√†n)
   */
  setStandardDiamondMaterial() {
    this.enhancedMeshes.forEach((mesh) => {
      if (mesh.userData.isDiamond) {
        mesh.material = new THREE.MeshPhysicalMaterial({
          color: 0xffffff,
          metalness: 0.0,
          roughness: 0.0,
          transmission: 0.99,
          transparent: true,
          opacity: 0.98,
          reflectivity: 1.0,
          envMapIntensity: 2.0,
          clearcoat: 1.0,
          clearcoatRoughness: 0.0,
          ior: 2.42, // Diamond IOR
          thickness: 0.1,
          attenuationDistance: 0.1,
          attenuationColor: new THREE.Color(0xffffff),
          side: THREE.DoubleSide,
        });

        if (this.envMap) {
          mesh.material.envMap = this.envMap;
        }

        mesh.material.needsUpdate = true;
      }
    });

    console.log("üíé ƒê√£ √°p d·ª•ng v·∫≠t li·ªáu kim c∆∞∆°ng ti√™u chu·∫©n");
  }

  /**
   * Bu·ªôc t·∫•t c·∫£ c√°c mesh c√≥ th·ªÉ l√† kim c∆∞∆°ng th√†nh kim c∆∞∆°ng
   */
  forceAllPotentialDiamondsUniform() {
    // T√¨m t·∫•t c·∫£ mesh c√≥ th·ªÉ l√† kim c∆∞∆°ng
    const potentialDiamonds = Array.from(this.enhancedMeshes).filter((mesh) => {
      const name = mesh.name ? mesh.name.toLowerCase() : "";
      const materialName =
        mesh.material && mesh.material.name
          ? mesh.material.name.toLowerCase()
          : "";

      return (
        name.includes("diamond") ||
        name.includes("gem") ||
        name.includes("stone") ||
        name.includes("crystal") ||
        materialName.includes("diamond") ||
        materialName.includes("gem") ||
        materialName.includes("crystal") ||
        name.includes("brilliant") ||
        name.includes("round") ||
        name.includes("cut") ||
        (mesh.material &&
          mesh.material.color &&
          mesh.material.color.r > 0.8 &&
          mesh.material.color.g > 0.8 &&
          mesh.material.color.b > 0.8) ||
        (mesh.material && mesh.material.transparent) ||
        (mesh.material && mesh.material.opacity < 1.0)
      );
    });

    // √Åp d·ª•ng v·∫≠t li·ªáu kim c∆∞∆°ng th·ªëng nh·∫•t
    potentialDiamonds.forEach((mesh) => {
      mesh.userData.isDiamond = true;
      mesh.userData.isMetal = false;

      mesh.material = new THREE.MeshPhysicalMaterial({
        color: 0xffffff,
        metalness: 0.0,
        roughness: 0.0,
        transmission: 0.98,
        transparent: true,
        opacity: 0.95,
        reflectivity: 1.0,
        envMapIntensity: 3.5,
        clearcoat: 1.0,
        clearcoatRoughness: 0.0,
        ior: 2.42,
        thickness: 0.3,
        attenuationDistance: 0.3,
        attenuationColor: new THREE.Color(0xffffff),
        side: THREE.DoubleSide,
      });

      if (this.envMap) {
        mesh.material.envMap = this.envMap;
      }

      mesh.material.needsUpdate = true;
    });

    console.log(
      `üîß ƒê√£ bu·ªôc ${potentialDiamonds.length} mesh th√†nh kim c∆∞∆°ng th·ªëng nh·∫•t`
    );
  }

  /**
   * Reset v·ªÅ v·∫≠t li·ªáu kim c∆∞∆°ng g·ªëc (opal/moonstone style)
   */
  resetToOriginalMaterials() {
    this.enhancedMeshes.forEach((mesh) => {
      if (mesh.userData.isDiamond) {
        this._applyDiamondMaterial(mesh);
      }
    });
    console.log("üîÑ ƒê√£ reset kim c∆∞∆°ng v·ªÅ v·∫≠t li·ªáu g·ªëc");
  }

  /**
   * L·∫•y th·ªëng k√™ v·ªÅ c√°c mesh ƒë√£ tƒÉng c∆∞·ªùng
   */
  getEnhancementStats() {
    const stats = {
      total: this.enhancedMeshes.size,
      diamonds: 0,
      metals: 0,
    };

    this.enhancedMeshes.forEach((mesh) => {
      if (mesh.userData.isDiamond) {
        stats.diamonds++;
      } else if (mesh.userData.isMetal) {
        stats.metals++;
      }
    });

    return stats;
  }

  /**
   * D·ªçn d·∫πp t√†i nguy√™n
   */
  dispose() {
    this.enhancedMeshes.clear();
    this.envMap = null;
    console.log("üßπ ƒê√£ d·ªçn d·∫πp RingEnhancer");
  }
}

/**
 * H√†m ti·ªán √≠ch ƒë·ªÉ t·∫°o v√† s·ª≠ d·ª•ng RingEnhancer
 */
export const enhanceRingModel = (model, envMap = null) => {
  const enhancer = new RingEnhancer(envMap);
  enhancer.enhanceRingModel(model, envMap);
  return enhancer;
};

export default RingEnhancer;

// // Three.js ƒë√£ load studio_small_03_4k.hdr trong setupEnvironment() v√† truy·ªÅn v√†o RingEnhancer th√¥ng qua:

//   // Trong loadModel() c·ªßa Three.js
//   this.ringEnhancer = new RingEnhancer(this.envMap);
//   this.ringEnhancer.enhanceRingModel(this.model, this.envMap);

//   RingEnhancer ch·ªâ vi·ªác nh·∫≠n v√† s·ª≠ d·ª•ng envMap ƒë√£ ƒë∆∞·ª£c chu·∫©n b·ªã s·∫µn
