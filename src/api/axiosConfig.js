// src/api/axiosConfig.js
import axios from "axios";

// ============= REMOTE BACKEND INSTANCE =============
// Instance cho remote backend (deployed) - d√πng cho login, auth, etc.
const remoteApi = axios.create({
  baseURL: import.meta.env.VITE_REMOTE_API_BASE_URL || 'https://your-deployed-backend.com',
  headers: {
    "Content-Type": "application/json",
    "ngrok-skip-browser-warning": "true",
  },
});

// Request Interceptor cho remote API
remoteApi.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem("accessToken");
    if (token) {
      config.headers["Authorization"] = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// Response Interceptor cho remote API
remoteApi.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;
    
    const isAuthEndpoint =
      originalRequest.url.includes("/auth/authenticate") ||
      originalRequest.url.includes("/auth/refresh-token");

    if (isAuthEndpoint && error.response?.status === 401) {
      return Promise.reject(error);
    }

    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;
      console.log("Access Token expired. Refreshing...");

      try {
        const refreshToken = localStorage.getItem("refreshToken");
        if (!refreshToken) {
          console.error("No refresh token found. Logging out.");
          localStorage.clear();
          window.location.href = "/auth/login";
          return Promise.reject(error);
        }

        const refreshResponse = await axios.post(
          `${import.meta.env.VITE_REMOTE_API_BASE_URL}/api/v1/auth/refresh-token`,
          { refreshToken }
        );
        const { accessToken: newAccessToken } = refreshResponse.data;

        localStorage.setItem("accessToken", newAccessToken);
        originalRequest.headers["Authorization"] = `Bearer ${newAccessToken}`;

        console.log("Token refreshed. Retrying original request...");
        return remoteApi(originalRequest);
      } catch (refreshError) {
        console.error("Could not refresh token. Logging out.", refreshError);
        localStorage.clear();
        window.location.href = "/auth/login";
        return Promise.reject(refreshError);
      }
    }

    return Promise.reject(error);
  }
);

// ============= LOCAL BACKEND INSTANCE =============

// H√†m ki·ªÉm tra port c√≥ s·∫µn
const checkPortAvailable = async (port) => {
  try {
    const response = await fetch(`http://localhost:${port}/api/v1/health`, {
      method: 'GET',
      timeout: 2000
    });
    return response.ok;
  } catch (error) {
    return false;
  }
};

// H√†m auto-detect backend port
const detectBackendPort = async () => {
  const portsToCheck = [8080, 8081, 3000, 5000];
  
  for (const port of portsToCheck) {
    console.log(`üîç Checking port ${port}...`);
    const isAvailable = await checkPortAvailable(port);
    if (isAvailable) {
      console.log(`‚úÖ Found backend on port ${port}`);
      return port;
    }
  }
  
  console.log("‚ùå No backend detected on common ports");
  return 8081; // fallback
};

// H√†m x√°c ƒë·ªãnh URL c·ªßa backend - c√≥ th·ªÉ d·ªÖ d√†ng chuy·ªÉn ƒë·ªïi gi·ªØa local v√† ngrok
const getBackendURL = async () => {
  // Debug logging
  console.log("üîç Backend URL Detection Debug:", {
    hostname: window.location.hostname,
    VITE_MODE: import.meta.env.VITE_MODE,
    VITE_BACKEND_NGROK_URL: import.meta.env.VITE_BACKEND_NGROK_URL,
    VITE_API_BASE_URL: import.meta.env.VITE_API_BASE_URL,
    VITE_USE_LOCAL_BACKEND: import.meta.env.VITE_USE_LOCAL_BACKEND,
    VITE_LOCAL_BACKEND_PORT: import.meta.env.VITE_LOCAL_BACKEND_PORT,
  });

  // N·∫øu frontend ch·∫°y tr√™n Vercel ho·∫∑c production, ∆∞u ti√™n ngrok URL
  if (
    window.location.hostname.includes("vercel.app") ||
    window.location.hostname.includes("ngrok")
  ) {
    const url =
      import.meta.env.VITE_BACKEND_NGROK_URL ||
      import.meta.env.VITE_API_BASE_URL;
    console.log("‚úÖ Using Production/Vercel URL:", url);
    return url;
  }

  // Trong development, ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng ƒë·ªÉ quy·∫øt ƒë·ªãnh d√πng local hay ngrok
  if (import.meta.env.VITE_MODE === "development") {
    // N·∫øu c√≥ VITE_BACKEND_NGROK_URL, d√πng ngrok
    if (import.meta.env.VITE_BACKEND_NGROK_URL) {
      const url = import.meta.env.VITE_BACKEND_NGROK_URL;
      console.log("‚úÖ Using Development Ngrok URL:", url);
      return url;
    }

    // N·∫øu VITE_USE_LOCAL_BACKEND = 'true', d√πng port ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
    if (import.meta.env.VITE_USE_LOCAL_BACKEND === "true") {
      const port = import.meta.env.VITE_LOCAL_BACKEND_PORT || "8081";
      const url = `http://localhost:${port}`;
      console.log("‚úÖ Using Local Backend URL (forced):", url);
      return url;
    }

    // Auto-detect port trong development
    console.log("üöÄ Auto-detecting backend port...");
    const detectedPort = await detectBackendPort();
    const url = `http://localhost:${detectedPort}`;
    console.log("‚úÖ Using Auto-detected Backend URL:", url);
    return url;
  }

  // Fallback: d√πng local backend v·ªõi port ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
  const fallbackPort = import.meta.env.VITE_LOCAL_BACKEND_PORT || "8081";
  const url = import.meta.env.VITE_API_BASE_URL || `http://localhost:${fallbackPort}`;
  console.log("‚úÖ Using Fallback Backend URL:", url);
  return url;
};

// Kh·ªüi t·∫°o instance c·ªßa axios v·ªõi async baseURL
let baseURL = "http://localhost:8081"; // default fallback

// Async function ƒë·ªÉ set baseURL
const initializeAPI = async () => {
  try {
    baseURL = await getBackendURL();
    api.defaults.baseURL = baseURL;
    console.log("üîß API baseURL set to:", baseURL);
  } catch (error) {
    console.error("‚ùå Error initializing API:", error);
    // Keep default fallback
  }
};

const api = axios.create({
  baseURL: baseURL,
  headers: {
    "Content-Type": "application/json",
    "ngrok-skip-browser-warning": "true", // Header h·ªØu √≠ch ƒë·ªÉ b·ªè qua trang c·∫£nh b√°o c·ªßa ngrok
  },
});

// Initialize API when module loads
initializeAPI();

// Request Interceptor: ƒê√≠nh k√®m token v√†o m·ªói request. Gi·ªØ nguy√™n, kh√¥ng thay ƒë·ªïi.
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem("accessToken");
    if (token) {
      config.headers["Authorization"] = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// Response Interceptor: X·ª≠ l√Ω l√†m m·ªõi token. ƒê√¢y l√† n∆°i ch√∫ng ta s·ª≠a l·ªói.
api.interceptors.response.use(
  (response) => response, // N·∫øu request th√†nh c√¥ng, tr·∫£ v·ªÅ response lu√¥n
  async (error) => {
    const originalRequest = error.config;

    // --- B·∫ÆT ƒê·∫¶U S·ª¨A L·ªñI ---
    // Th√™m ƒëi·ªÅu ki·ªán ki·ªÉm tra URL c·ªßa request g·ªëc.
    // N·∫øu l·ªói 401 x·∫£y ra ·ªü ch√≠nh endpoint ƒëƒÉng nh·∫≠p ho·∫∑c l√†m m·ªõi token,
    // th√¨ kh√¥ng ƒë∆∞·ª£c c·ªë g·∫Øng l√†m m·ªõi token n·ªØa. ƒê√¢y l√† l·ªói sai th√¥ng tin ƒëƒÉng nh·∫≠p
    // ho·∫∑c refresh token ƒë√£ h·∫øt h·∫°n, kh√¥ng ph·∫£i l√† access token h·∫øt h·∫°n th√¥ng th∆∞·ªùng.
    const isAuthEndpoint =
      originalRequest.url.includes("/auth/authenticate") ||
      originalRequest.url.includes("/auth/refresh-token");

    if (isAuthEndpoint && error.response?.status === 401) {
      // Ch·ªâ ƒë∆°n gi·∫£n l√† tr·∫£ v·ªÅ l·ªói ƒë·ªÉ h√†m catch trong component (v√≠ d·ª• Login.js) c√≥ th·ªÉ x·ª≠ l√Ω.
      return Promise.reject(error);
    }
    // --- K·∫æT TH√öC S·ª¨A L·ªñI ---

    // Logic l√†m m·ªõi token cho c√°c API kh√°c (v√≠ d·ª•: /users/me, /products...)
    // N·∫øu l·ªói l√† 401 v√† request n√†y ch∆∞a ƒë∆∞·ª£c th·ª≠ l·∫°i (_retry = false)
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true; // ƒê√°nh d·∫•u l√† ƒë√£ th·ª≠ l·∫°i ƒë·ªÉ tr√°nh v√≤ng l·∫∑p v√¥ h·∫°n
      console.log("Access Token expired. Refreshing...");

      try {
        const refreshToken = localStorage.getItem("refreshToken");
        if (!refreshToken) {
          console.error("No refresh token found. Logging out.");
          localStorage.clear();
          window.location.href = "/auth/login"; // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang ƒëƒÉng nh·∫≠p
          return Promise.reject(error);
        }

        // G·ªçi API ƒë·ªÉ l√†m m·ªõi token
        const refreshResponse = await axios.post(
          `${getBackendURL()}/api/v1/auth/refresh-token`,
          { refreshToken }
        );
        const { accessToken: newAccessToken } = refreshResponse.data;

        // L∆∞u token m·ªõi v√† c·∫≠p nh·∫≠t header cho request g·ªëc
        localStorage.setItem("accessToken", newAccessToken);
        originalRequest.headers["Authorization"] = `Bearer ${newAccessToken}`;

        // Th·ª≠ l·∫°i request ban ƒë·∫ßu v·ªõi token m·ªõi
        console.log("Token refreshed. Retrying original request...");
        return api(originalRequest);
      } catch (refreshError) {
        // N·∫øu l√†m m·ªõi token c≈©ng th·∫•t b·∫°i, logout ng∆∞·ªùi d√πng
        console.error("Could not refresh token. Logging out.", refreshError);
        localStorage.clear();
        window.location.href = "/auth/login";
        return Promise.reject(refreshError);
      }
    }

    // Tr·∫£ v·ªÅ l·ªói cho c√°c tr∆∞·ªùng h·ª£p kh√°c (v√≠ d·ª• l·ªói 500, 404...)
    return Promise.reject(error);
  }
);

// ============= EXPORTS =============
export default api; // Local backend instance (default export)
export { remoteApi }; // Remote backend instance (named export)
