=== BaseOverlay.css ===
/* ============================================================= */
/*                    BaseOverlay.css                          */
/* ============================================================= */

/*
 * OVERLAY EFFECT - Chỉ hiệu ứng mở rộng với cross-lines
 */
.base-overlay {
    position: fixed;
    background: radial-gradient(50% 50% at 50% 50%,
            #FFFFFF 36%,
            rgba(255, 255, 255, 0.7) 66%,
            rgba(187, 35, 76, 0.1) 95.67%,
            #BB234C 100%);
    backdrop-filter: blur(10px);
    border-radius: 50%;

    /* Trạng thái ban đầu: ẩn */
    opacity: 0;
    transform: scale(0.1);
    pointer-events: none;

    /* Smooth transition */
    transition-property: top, left, width, height, opacity, transform, box-shadow;
    transition-duration: 0.7s;
    transition-timing-function: cubic-bezier(0.25, 0.46, 0.45, 0.94);

    z-index: 1000;
    display: flex;
    align-items: center;
    justify-content: center;
}

/* Trạng thái hiển thị: mở rộng ra toàn màn hình */
.base-overlay.show {
    top: 50% !important;
    left: 50% !important;
    width: 140vmin !important;
    height: 140vmin !important;
    opacity: 1;
    transform: scale(1) translate(-50%, -50%);
    pointer-events: all;

    /* Hiệu ứng phát sáng */
    box-shadow:
        0 0 0 2px rgba(130, 170, 255, 0.6),
        0 0 15px rgba(130, 170, 255, 0.3),
        0 0 30px rgba(130, 170, 255, 0.1);
}

/*
 * CROSS-LINES - 4 đường tạo thành 8 đỉnh
 */
.cross-lines {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    opacity: 0;
    animation: fadeInLines 0.8s ease-out 0.8s forwards;
    animation-fill-mode: forwards;
}

.cross-lines .line {
    position: absolute;
    opacity: 0.35;
}

/* Đường dọc chính (tạo 2 đỉnh trên-dưới) */
.cross-lines .line-vertical {
    top: 5%;
    left: 50%;
    width: 1.5px;
    height: 90%;
    transform: translateX(-50%);
    background: linear-gradient(to bottom,
            transparent 0%,
            rgba(255, 255, 255, 0.1) 5%,
            rgba(255, 255, 255, 0.8) 10%,
            white 15%,
            rgba(255, 255, 255, 0.8) 20%,
            rgba(255, 255, 255, 0.3) 50%,
            rgba(255, 255, 255, 0.8) 80%,
            white 85%,
            rgba(255, 255, 255, 0.8) 90%,
            rgba(255, 255, 255, 0.1) 95%,
            transparent 100%);
}

/* Đường ngang chính (tạo 2 đỉnh trái-phải) */
.cross-lines .line-horizontal {
    top: 50%;
    left: 5%;
    width: 90%;
    height: 1.5px;
    transform: translateY(-50%);
    background: linear-gradient(to right,
            transparent 0%,
            rgba(255, 255, 255, 0.1) 5%,
            rgba(255, 255, 255, 0.8) 10%,
            white 15%,
            rgba(255, 255, 255, 0.8) 20%,
            rgba(255, 255, 255, 0.3) 50%,
            rgba(255, 255, 255, 0.8) 80%,
            white 85%,
            rgba(255, 255, 255, 0.8) 90%,
            rgba(255, 255, 255, 0.1) 95%,
            transparent 100%);
}

/* Đường chéo 45° (tạo 2 đỉnh chéo) */
.cross-lines .line-diagonal-1 {
    top: 50%;
    left: 5%;
    width: 90%;
    height: 1.5px;
    transform: translateY(-50%) rotate(45deg);
    transform-origin: center;
    background: linear-gradient(to right,
            transparent 0%,
            rgba(255, 255, 255, 0.1) 5%,
            rgba(255, 255, 255, 0.8) 10%,
            white 15%,
            rgba(255, 255, 255, 0.8) 20%,
            rgba(255, 255, 255, 0.3) 50%,
            rgba(255, 255, 255, 0.8) 80%,
            white 85%,
            rgba(255, 255, 255, 0.8) 90%,
            rgba(255, 255, 255, 0.1) 95%,
            transparent 100%);
}

/* Đường chéo -45° (tạo 2 đỉnh chéo còn lại) */
.cross-lines .line-diagonal-2 {
    top: 50%;
    left: 5%;
    width: 90%;
    height: 1.5px;
    transform: translateY(-50%) rotate(-45deg);
    transform-origin: center;
    background: linear-gradient(to right,
            transparent 0%,
            rgba(255, 255, 255, 0.1) 5%,
            rgba(255, 255, 255, 0.8) 10%,
            white 15%,
            rgba(255, 255, 255, 0.8) 20%,
            rgba(255, 255, 255, 0.3) 50%,
            rgba(255, 255, 255, 0.8) 80%,
            white 85%,
            rgba(255, 255, 255, 0.8) 90%,
            rgba(255, 255, 255, 0.1) 95%,
            transparent 100%);
}

/*
 * KEYFRAMES
 */
@keyframes fadeInLines {
    to {
        opacity: 0.8;
    }
}

/* Responsive cho mobile */
@media (max-width: 768px) {
    .base-overlay.show {
        width: 95vmin !important;
        height: 95vmin !important;
    }
}

@media (max-width: 480px) {
    .base-overlay.show {
        width: 100vmin !important;
        height: 100vmin !important;
    }
}

=== BaseOverlay.jsx ===
// ============================================================= //
//                    BaseOverlay.jsx (UPDATED)                  //
// ============================================================= //
import React from 'react';
import ReactDOM from 'react-dom';
import './BaseOverlay.css';

const BaseOverlay = ({
    isActive,
    overlayStyle,
    onClose,
    children,
    customClassName = '',
    disableDefaultClose = false,
    closeOnMouseLeave = false // ✨ Prop này là "công tắc" để bật/tắt tính năng
}) => {

    const handleCloseOnClick = () => {
        if (!disableDefaultClose) {
            onClose();
        }
    };

    // Handler này chỉ được gọi khi chuột rời khỏi
    const handleMouseLeave = () => {
        // Chỉ gọi hàm onClose nếu "công tắc" closeOnMouseLeave được bật
        if (closeOnMouseLeave) {
            onClose();
        }
    };

    const overlayMarkup = (
        <div
            className={`base-overlay ${isActive ? 'show' : ''} ${customClassName}`}
            style={overlayStyle}
            onClick={handleCloseOnClick}
            onMouseLeave={handleMouseLeave} // ✨ Gắn sự kiện vào đây
        >
            <div className="cross-lines">
                <div className="line line-vertical"></div>
                <div className="line line-horizontal"></div>
                <div className="line line-diagonal-1"></div>
                <div className="line line-diagonal-2"></div>
            </div>
            {children}
        </div>
    );

    return ReactDOM.createPortal(
        overlayMarkup,
        document.getElementById('overlay-root')
    );
};

export default BaseOverlay;

=== PresenceOverlay.css ===
/* ============================================================= */
/*                    PresenceOverlay.css                        */
/* ============================================================= */
.base-overlay.presence-overlay {
    background: radial-gradient(50% 50% at 50% 50%,
            #FFF 36.06%,
            rgba(255, 255, 255, 0.70) 65.87%,
            rgba(187, 35, 76, 0.10) 95.67%,
            #23B3BB 100%);
    /* <-- Màu viền là Xanh Cyan này */
}

.base-overlay.presence-overlay.show {
    opacity: 1;
    pointer-events: auto;

    /* ✨ [THAY ĐỔI] Ghi đè box-shadow để khớp với màu Xanh Cyan (#23B3BB) */
    box-shadow:
        0 0 0 2px rgba(35, 179, 187, 0.6),
        /* rgb(35, 179, 187) là #23B3BB */
        0 0 15px rgba(35, 179, 187, 0.3),
        0 0 30px rgba(35, 179, 187, 0.1);
}

/*
 * CONTENT WRAPPER - Đây là SÂN KHẤU CHÍNH, chiếm 100% overlay
 */
.presence-content-wrapper {
    /* Animation */
    opacity: 0;
    transition: opacity 0.6s ease-out 0.5s;

    /* Định vị - RẤT QUAN TRỌNG */
    position: relative;
    width: 100%;
    height: 100%;

    /* Dùng flex để CĂN GIỮA "sân khấu phụ" (.presence-content-container) */
    display: flex;
    justify-content: center;
    align-items: center;
}

.base-overlay.presence-overlay.show .presence-content-wrapper {
    opacity: 1;
}

/* ... các style còn lại giữ nguyên ... */

/*
 * CONTAINER CHO 2 ĐOẠN TEXT - Đây là "sân khấu" phụ, có max-width
 */
.presence-content-container {
    position: relative;
    width: 100%;
    height: 100%;
    max-width: 650px;
}

/*
 * ĐỊNH VỊ CÁC PHẦN TỬ (Rule chung)
 */
.presence-text-top,
.presence-text-bottom,
.presence-title {
    position: absolute;
    margin: 0;
    padding: 0;
    animation: fadeInFloat 0.8s ease-out forwards;
    opacity: 0;
}

/*
 * TITLE - CĂN GIỮA TUYỆT ĐỐI VỚI SÂN KHẤU CHÍNH (.presence-content-wrapper)
 */
.presence-title {
    top: 46.3%;
    left: 40%;
    transform: translate(-50%, -50%);
    animation-delay: 0.7s;
    color: #BC224C;
    font-family: "SaolDisplay-Regular-ttf", serif;
    font-size: clamp(2.5rem, 4.5vw, 4rem);
    font-weight: 300;
    line-height: 90%;
    letter-spacing: -1.92px;
    z-index: 10;
}

/*
 * KHỐI VĂN BẢN TRÊN CÙNG - Định vị theo sân khấu phụ (.presence-content-container)
 */
.presence-text-top {
    top: 32%;
    right: -10%;
    width: auto;
    text-align: left;
    animation-delay: 0.9s;
    color: #000;
    font-family: "BT-BeauSans-Regular-ttf", sans-serif;
    font-size: 16px;
    font-style: normal;
    font-weight: 400;
    line-height: 110%;
}

/*
 * KHỐI VĂN BẢN DƯỚI CÙNG - Định vị theo sân khấu phụ (.presence-content-container)
 */
.presence-text-bottom {
    bottom: 28%;
    left: 8%;
    width: auto;
    text-align: left;
    animation-delay: 1.1s;
    color: #797979;
    font-family: "BT-BeauSans-Regular-ttf", sans-serif;
    font-size: 16px;
    font-weight: 400;
    line-height: 110%;
}

/*
 * KEYFRAMES
 */
@keyframes fadeInFloat {
    from {
        opacity: 0;
        transform: translateY(15px);
    }

    to {
        opacity: 1;
        transform: translateY(0px);
    }
}

/*
 * RESPONSIVE DESIGN - Điều chỉnh vị trí cho màn hình nhỏ
 */
@media (max-width: 768px) {
    .presence-text-top {
        top: 25%;
        right: 10%;
        width: 45%;
        font-size: 14px;
    }

    .presence-text-bottom {
        bottom: 22%;
        left: 10%;
        width: 50%;
        font-size: 14px;
    }
}

/* Khi màn hình quá nhỏ, quay về layout xếp chồng cho dễ đọc */
@media (max-width: 480px) {
    .presence-content-wrapper {
        align-items: flex-start;
        padding-top: 25%;
    }

    .presence-content-container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        padding: 5%;
        max-width: 90%;
        height: auto;
    }

    .presence-text-top,
    .presence-text-bottom,
    .presence-title {
        position: static;
        transform: none;
        width: 100%;
        text-align: center;
    }

    .presence-text-top {
        order: 2;
        margin-bottom: 20px;
        font-size: 12px;
    }

    .presence-title {
        order: 1;
        margin-bottom: 20px;
        font-size: 2.5rem;
    }

    .presence-text-bottom {
        order: 3;
        font-size: 12px;
    }
}

=== PresenceOverlay.jsx ===
// PresenceOverlay.jsx - Cập nhật cho layout mới (ĐÃ SỬA LỖI)

import React from 'react';
import './BaseOverlay.css';
import './PresenceOverlay.css';

const PresenceOverlay = ({
    isActive,
    overlayStyle,
    onClose
}) => {
    // Ngăn chặn sự kiện click lan ra ngoài khi click vào nội dung bên trong
    const handleContentClick = (e) => {
        e.stopPropagation();
    };

    return (
        <div
            className={`base-overlay presence-overlay ${isActive ? 'show' : ''}`}
            style={overlayStyle}
            onMouseLeave={onClose}
            onClick={onClose}
        >
            {/* 4 đường cross-lines giữ nguyên */}
            <div className="cross-lines">
                <div className="line line-vertical"></div>
                <div className="line line-horizontal"></div>
                <div className="line line-diagonal-1"></div>
                <div className="line line-diagonal-2"></div>
            </div>

            {/* 
              Content wrapper LÀ SÂN KHẤU CHÍNH CHO TẤT CẢ NỘI DUNG.
              Nó sẽ có position: relative để các con bên trong định vị theo nó.
            */}
            <div className="presence-content-wrapper" onClick={handleContentClick}>

                {/* 1. TITLE được đặt ở đây để căn giữa theo SÂN KHẤU CHÍNH */}
                <h2 className="presence-title">Presence</h2>

                {/* 
                  2. CONTAINER cho 2 đoạn text. 
                  Nó cũng được đặt ở đây và sẽ là "sân khấu phụ" cho các đoạn text.
                */}
                <div className="presence-content-container">
                    <div className="presence-text-top">
                        <p>
                            Mirror evolves with you - reflecting your presence<br />
                            as it grows, shifts, and becomes.
                        </p>
                    </div>
                    <div className="presence-text-bottom">
                        <p>
                            We remember your milestones.<br />
                            We grow with your journey.<br />
                            Each piece becomes part of your story.<br />
                            From a ring that catches the light to a necklace<br />
                            that moves as you do - we're there, quietly shining with you.
                        </p>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default PresenceOverlay;

=== SensesOverlay.css ===
/* ✨ [THÊM MỚI] Ghi đè style nền cho Senses Overlay */
.base-overlay.senses-overlay {
    background: radial-gradient(50% 50% at 50% 50%,
            #FFF 36%,
            rgba(255, 255, 255, 0.70) 66%,
            rgba(187, 35, 76, 0.10) 95.67%,
            #BB234C 100%);
    /* <-- Màu viền hồng */
}

/* ✨ [THÊM MỚI] Ghi đè box-shadow để khớp với màu nền hồng */
.base-overlay.senses-overlay.show {
    box-shadow:
        0 0 0 2px rgba(187, 35, 76, 0.6),
        0 0 15px rgba(187, 35, 76, 0.3),
        0 0 30px rgba(187, 35, 76, 0.1);
}

/* Định nghĩa animation bồng bềnh */
@keyframes floatAnimation {
    0% {
        transform: translate(-50%, -50%) translateY(0px);
    }

    50% {
        transform: translate(-50%, -50%) translateY(-8px);
        /* Di chuyển lên */
    }

    100% {
        transform: translate(-50%, -50%) translateY(0px);
        /* Trở về vị trí cũ */
    }
}

/* Container chính để bố trí các senses */
.senses-container {
    position: relative;
    width: 100%;
    height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 600px;
    padding: 40px;
}

/* Style cho tiêu đề chính "Senses" */
.senses-title {
    color: var(--Pink, #BC224C);
    text-align: center;
    font-family: "SaolDisplay-Regular-ttf";
    font-size: 64px;
    font-style: normal;
    font-weight: 300;
    line-height: 90%;
    letter-spacing: -1.92px;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-60%, -50%);
    z-index: 10;
}

/* Style chung cho các sense items */
.sense-item {
    color: var(--Pink, #BC224C);
    text-align: center;
    font-family: "BT-BeauSans-Regular-ttf";
    font-size: 20px;
    font-style: normal;
    font-weight: 400;
    line-height: 110%;
    position: absolute !important;
    cursor: pointer;
    transition: opacity 0.3s ease;
    transform: translate(-50%, -50%);
    animation: floatAnimation 4s ease-in-out infinite;
    z-index: 5;
}

/* 
 * 🎯 [VỊ TRÍ CÁC PHẦN TỬ - CHỈNH SỬA TẠI ĐÂY]
 * 
 * Để di chuyển các phần tử:
 * - top/bottom: điều chỉnh lên xuống (0% = trên cùng, 100% = dưới cùng)
 * - left/right: điều chỉnh trái phải (0% = bên trái, 100% = bên phải)
 * 
 * VÍ DỤ:
 * - Muốn di chuyển Sight xuống: tăng giá trị top từ 20% lên 25%
 * - Muốn di chuyển Touch sang trái: giảm giá trị left từ 25% xuống 20%
 * - Muốn di chuyển Scent sang phải: tăng giá trị right từ 20% lên 25%
 */

/* Sight: Vị trí trên cùng */
.sense-sight {
    top: 15%;
    /* ← CHỈNH ĐỂ DI CHUYỂN LÊN/XUỐNG */
    left: -10%;
    /* ← CHỈNH ĐỂ DI CHUYỂN TRÁI/PHẢI */
    animation-delay: 0s;
}

/* Touch: Vị trí trên bên trái */
.sense-touch {
    top: 25%;
    /* ← CHỈNH ĐỂ DI CHUYỂN LÊN/XUỐNG */
    right: -110%;
    /* ← CHỈNH ĐỂ DI CHUYỂN TRÁI/PHẢI */
    animation-delay: -1.5s;
}

/* Scent: Vị trí bên phải */
.sense-scent {
    top: 48%;
    /* ← CHỈNH ĐỂ DI CHUYỂN LÊN/XUỐNG */
    left: -130%;
    /* ← CHỈNH ĐỂ DI CHUYỂN TRÁI/PHẢI (right càng nhỏ = càng sang phải) */
    animation-delay: -0.5s;
}

/* Sound: Vị trí dưới bên trái */
.sense-sound {
    bottom: 15%;
    /* ← CHỈNH ĐỂ DI CHUYỂN LÊN/XUỐNG (bottom càng nhỏ = càng xuống dưới) */
    left: -4%;
    /* ← CHỈNH ĐỂ DI CHUYỂN TRÁI/PHẢI */
    animation-delay: -2.5s;
}

/* Taste: Vị trí dưới bên phải */
.sense-taste {
    bottom: 20%;
    /* ← CHỈNH ĐỂ DI CHUYỂN LÊN/XUỐNG (bottom càng nhỏ = càng xuống dưới) */
    right: -120%;
    /* ← CHỈNH ĐỂ DI CHUYỂN TRÁI/PHẢI (right càng nhỏ = càng sang phải) */
    animation-delay: -1s;
}

/* Responsive adjustments cho tablet */
@media (max-width: 768px) {
    .senses-title {
        font-size: 48px;
    }

    .sense-item {
        font-size: 16px;
    }

    /* 🎯 [VỊ TRÍ CHO MÀN HÌNH TABLET - CHỈNH SỬA NẾU CẦN] */
    .sense-sight {
        top: 22%;
        left: 50%;
    }

    .sense-touch {
        top: 32%;
        left: 22%;
    }

    .sense-scent {
        top: 50%;
        right: 18%;
    }

    .sense-sound {
        bottom: 32%;
        left: 22%;
    }

    .sense-taste {
        bottom: 32%;
        right: 22%;
    }
}

/* Responsive adjustments cho mobile */
@media (max-width: 480px) {
    .senses-title {
        font-size: 36px;
    }

    .sense-item {
        font-size: 14px;
    }

    /* 🎯 [VỊ TRÍ CHO MÀN HÌNH MOBILE - CHỈNH SỬA NẾU CẦN] */
    .sense-sight {
        top: 25%;
        left: 50%;
    }

    .sense-touch {
        top: 35%;
        left: 20%;
    }

    .sense-scent {
        top: 50%;
        right: 15%;
    }

    .sense-sound {
        bottom: 35%;
        left: 20%;
    }

    .sense-taste {
        bottom: 35%;
        right: 20%;
    }
}

/* Nút action không thay đổi */
.senses-content-wrapper .action-button {
    background-color: #BB234C;
    color: white;
    border: none;
    padding: 12px 25px;
    border-radius: 8px;
    cursor: pointer;
    font-size: clamp(0.85rem, 1.8vw, 1.2rem);
    transition: background-color 0.3s ease, transform 0.2s ease;
    margin-top: 15px;
    box-shadow: 0 0 15px rgba(187, 35, 76, 0.5);
}

.senses-content-wrapper .action-button:hover {
    background-color: #DD3366;
    transform: translateY(-2px);
    box-shadow: 0 0 25px rgba(187, 35, 76, 0.7);
}

=== SensesOverlay.jsx ===
// ============================================================= //
//                    SensesOverlay.jsx (UPDATED)                //
// ============================================================= //
import React from 'react';
import BaseOverlay from './BaseOverlay';
import './SensesOverlay.css';

const SensesOverlay = ({ isActive, overlayStyle, onClose }) => {
    return (
        <BaseOverlay
            isActive={isActive}
            overlayStyle={overlayStyle}
            onClose={onClose}
            customClassName="senses-overlay"
            disableDefaultClose={true}
            closeOnMouseLeave={true} // ✨ BẬT TÍNH NĂNG: Đóng khi di chuột ra ngoài
        >
            <div className="senses-content-wrapper">
                <div className="senses-container">
                    <div className="sense-item sense-sight">Sight</div>
                    <div className="sense-item sense-touch">Touch</div>
                    <div className="senses-title">Senses</div>
                    <div className="sense-item sense-scent">Scent</div>
                    <div className="sense-item sense-sound">Sound</div>
                    <div className="sense-item sense-taste">Taste</div>
                </div>
            </div>
        </BaseOverlay>
    );
};

export default SensesOverlay;

=== SpaceOverlay.css ===
/* ============================================================= */
/*                    SpaceOverlay.css                           */
/* ============================================================= */

/*
 * SECTION 1: LỚP PHỦ CHÍNH (HIỆU ỨNG QUẢ CẦU)
 */
.space-overlay {
    position: fixed;
    /* ✨ [CẬP NHẬT] Thay đổi màu viền nền sang Xanh Dương */
    background: radial-gradient(50% 50% at 50% 50%,
            #FFF 36.06%,
            rgba(255, 255, 255, 0.70) 65.87%,
            rgba(187, 35, 76, 0.10) 95.67%,
            #2358BB 100%);
    backdrop-filter: blur(10px);
    border-radius: 50%;
    opacity: 0;
    transform: scale(0.1);
    pointer-events: none;
    transition-property: top, left, width, height, opacity, transform, transform-origin, box-shadow;
    transition-duration: 0.7s;
    transition-timing-function: cubic-bezier(0.25, 0.46, 0.45, 0.94);
    z-index: 1000;
    display: flex;
    align-items: center;
    justify-content: center;
}

.space-overlay.show {
    top: 50% !important;
    left: 50% !important;
    width: 140vmin !important;
    height: 140vmin !important;
    opacity: 1;
    transform: scale(1) translate(-50%, -50%);
    pointer-events: all;

    /* ✨ [CẬP NHẬT] Hiệu ứng phát sáng khớp với màu Xanh Dương (#2358BB) */
    box-shadow:
        0 0 0 2px rgba(35, 88, 187, 0.6),
        /* rgb(35, 88, 187) là #2358BB */
        0 0 15px rgba(35, 88, 187, 0.3),
        0 0 30px rgba(35, 88, 187, 0.1);
}

/*
 * SECTION 2: CONTENT WRAPPER
 */
.space-content-wrapper {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease-out 0.3s, transform 0.6s ease-out 0.3s;
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.space-overlay.show .space-content-wrapper {
    opacity: 1;
    transform: translateY(0);
}

/*
 * SECTION 3: KEYFRAMES
 */
@keyframes fadeInLines {
    to {
        opacity: 0.8;
    }
}

@keyframes fadeInFloat {
    from {
        opacity: 0;
        transform: translateY(20px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/*
 * SECTION 4: CSS cho 4 đường kẻ của "SPACE" - Tạo 8 đỉnh
 */
.cross-lines {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    opacity: 0;
    animation: fadeInLines 0.8s ease-out 0.8s forwards;
    animation-fill-mode: forwards;
}

.cross-lines .line {
    position: absolute;
    opacity: 0.35;
}

/* Đường dọc chính (tạo 2 đỉnh trên-dưới) */
.cross-lines .line-vertical {
    top: 5%;
    left: 50%;
    width: 1.5px;
    height: 90%;
    transform: translateX(-50%);
    background: linear-gradient(to bottom,
            transparent 0%,
            rgba(255, 255, 255, 0.1) 5%,
            rgba(255, 255, 255, 0.8) 10%,
            white 15%,
            rgba(255, 255, 255, 0.8) 20%,
            rgba(255, 255, 255, 0.3) 50%,
            rgba(255, 255, 255, 0.8) 80%,
            white 85%,
            rgba(255, 255, 255, 0.8) 90%,
            rgba(255, 255, 255, 0.1) 95%,
            transparent 100%);
}

/* Đường ngang chính (tạo 2 đỉnh trái-phải) */
.cross-lines .line-horizontal {
    top: 50%;
    left: 5%;
    width: 90%;
    height: 1.5px;
    transform: translateY(-50%);
    background: linear-gradient(to right,
            transparent 0%,
            rgba(255, 255, 255, 0.1) 5%,
            rgba(255, 255, 255, 0.8) 10%,
            white 15%,
            rgba(255, 255, 255, 0.8) 20%,
            rgba(255, 255, 255, 0.3) 50%,
            rgba(255, 255, 255, 0.8) 80%,
            white 85%,
            rgba(255, 255, 255, 0.8) 90%,
            rgba(255, 255, 255, 0.1) 95%,
            transparent 100%);
}

/* Đường chéo 45° (tạo 2 đỉnh chéo) */
.cross-lines .line-diagonal-1 {
    top: 50%;
    left: 5%;
    width: 90%;
    height: 1.5px;
    transform: translateY(-50%) rotate(45deg);
    transform-origin: center;
    background: linear-gradient(to right,
            transparent 0%,
            rgba(255, 255, 255, 0.1) 5%,
            rgba(255, 255, 255, 0.8) 10%,
            white 15%,
            rgba(255, 255, 255, 0.8) 20%,
            rgba(255, 255, 255, 0.3) 50%,
            rgba(255, 255, 255, 0.8) 80%,
            white 85%,
            rgba(255, 255, 255, 0.8) 90%,
            rgba(255, 255, 255, 0.1) 95%,
            transparent 100%);
}

/* Đường chéo -45° (tạo 2 đỉnh chéo còn lại) */
.cross-lines .line-diagonal-2 {
    top: 50%;
    left: 5%;
    width: 90%;
    height: 1.5px;
    transform: translateY(-50%) rotate(-45deg);
    transform-origin: center;
    background: linear-gradient(to right,
            transparent 0%,
            rgba(255, 255, 255, 0.1) 5%,
            rgba(255, 255, 255, 0.8) 10%,
            white 15%,
            rgba(255, 255, 255, 0.8) 20%,
            rgba(255, 255, 255, 0.3) 50%,
            rgba(255, 255, 255, 0.8) 80%,
            white 85%,
            rgba(255, 255, 255, 0.8) 90%,
            rgba(255, 255, 255, 0.1) 95%,
            transparent 100%);
}

/*
 * SECTION 5: TEXT STYLING CHO SPACE
 */
.space-content-container {
    /* Thêm padding để đảm bảo nội dung nằm trong hình tròn */
    padding: 15%;

    /* Căn giữa nhưng để space cho title ở dưới */
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
}

.space-description {
    animation: fadeInFloat 0.8s ease-out 0.5s forwards;
    opacity: 0;
    text-align: center;
    max-width: 500px;
    /* Dịch lên trên một chút để chừa chỗ cho title Space */
    margin-bottom: 40px;
}

.space-description p:first-child {
    font-weight: 600;
    color: black;
}

.space-description p {
    font-family: "BT-BeauSans-Regular-ttf", sans-serif;
    font-size: clamp(8px, 1.5vw, 12px);
    font-weight: 400;
    line-height: 1.4;
    color: #000000;
    margin: 0 0 0.8em 0;
}

.space-description p.text-gray {
    color: #797979;
}

.space-title {
    /* Áp dụng style theo yêu cầu */
    color: #BC224C;
    text-align: center;
    font-family: "SaolDisplay-Regular-ttf", serif;
    font-size: clamp(2.5rem, 6vw, 4rem);
    font-style: normal;
    font-weight: 300;
    line-height: 90%;
    letter-spacing: -1.92px;

    /* Layout positioning */
    position: static;
    transform: none;
    margin: 0;
    animation: fadeInFloat 0.8s ease-out 0.7s forwards;
    opacity: 0;
}

/*
 * SECTION 6: RESPONSIVE
 */
@media (max-width: 768px) {
    .space-overlay.show {
        width: 95vmin !important;
        height: 95vmin !important;
    }

    .space-description {
        padding-top: 5%;
    }

    .space-title {
        margin-bottom: 5%;
    }
}

@media (max-width: 480px) {
    .space-title {
        font-size: 2.2rem;
    }

    .space-description p {
        font-size: 13px;
        line-height: 1.5;
    }
}

=== SpaceOverlay.jsx ===
// SpaceOverlay.jsx

import React from 'react';
import './SpaceOverlay.css';

const SpaceOverlay = ({
    isActive,
    overlayStyle,
    onClose
}) => {
    // Ngăn chặn sự kiện click lan ra ngoài khi click vào nội dung bên trong
    const handleContentClick = (e) => {
        e.stopPropagation();
    };

    return (
        <div
            className={`space-overlay ${isActive ? 'show' : ''}`}
            style={overlayStyle}
            onClick={onClose}
            onMouseLeave={onClose}
        >
            <div className="space-content-wrapper" onClick={handleContentClick}>
                {/* 4 đường line tạo thành 8 đỉnh */}
                <div className="cross-lines">
                    <div className="line line-vertical"></div>
                    <div className="line line-horizontal"></div>
                    <div className="line line-diagonal-1"></div>
                    <div className="line line-diagonal-2"></div>
                </div>

                <div className="space-content-container">
                    <div className="space-description">
                        <p>Mirror moves with you — from glowing showrooms<br />
                            to calming spas, from salons to your personal screen.</p>

                        <p className="text-gray">
                            Wherever life takes you, we're there<br />
                            — seamlessly integrated, never intrusive.<br />
                            With immersive technology, we gently blur the line<br />
                            between digital and physical.<br />
                            Our jewelry isn't meant to be kept behind glass<br />
                            – it's made to belong with you, in every moment that matters.
                        </p>
                    </div>

                    {/* Chữ Space title */}
                    <h2 className="space-title">Space</h2>
                </div>
            </div>
        </div>
    );
};

export default SpaceOverlay;

=== TimeOverlay.css ===
/* TimeOverlay.css - UPDATED */

/*
 * Lớp này ghi đè background mặc định để tạo viền tím.
 * Phần này giữ nguyên.
 */
.time-overlay-theme {
    background: radial-gradient(50% 50% at 50% 50%,
            #FFFFFF 36.06%,
            rgba(255, 255, 255, 0.70) 65.87%,
            rgba(187, 35, 76, 0.10) 95.67%,
            #9D23BB 100%);
    /* <-- Màu viền là Tím này */
}

/* ✨ [THÊM MỚI] Ghi đè box-shadow khi overlay hiển thị để khớp với màu Tím (#9D23BB) */
.base-overlay.time-overlay-theme.show {
    box-shadow:
        0 0 0 2px rgba(157, 35, 187, 0.6),
        /* rgb(157, 35, 187) là #9D23BB */
        0 0 15px rgba(157, 35, 187, 0.3),
        0 0 30px rgba(157, 35, 187, 0.1);
}


/*
 * ✨ [THAY ĐỔI] Container chính cho nội dung
 * Sử dụng Flexbox để sắp xếp và căn chỉnh các khối văn bản bên trong.
 */
.time-overlay-content {
    /* Layout */
    display: flex;
    flex-direction: column;
    /* Xếp các phần tử theo chiều dọc */
    justify-content: center;
    /* Căn giữa các phần tử theo trục dọc */
    align-items: center;
    /* Căn giữa các phần tử theo trục ngang */
    gap: 2rem;
    /* Khoảng cách đều giữa các khối văn bản (1rem = 16px) */

    /* Kích thước và khoảng đệm */
    max-width: 650px;
    /* Giới hạn chiều rộng để dễ đọc trên màn hình lớn */
    padding: 2rem;
    box-sizing: border-box;

    /* Animation: xuất hiện mượt mà sau khi overlay mở rộng */
    opacity: 0;
    transform: translateY(15px);
    animation: fadeInContent 1s ease-out 0.8s forwards;
}


/* ✨ [MỚI] Style cho Tiêu đề "Time" */
.time-title {
    color: #BC224C;
    text-align: center;
    font-family: "SaolDisplay-Regular-ttf", serif;
    /* Thêm "serif" làm font dự phòng */
    font-size: 64px;
    font-style: normal;
    font-weight: 300;
    line-height: 90%;
    /* 57.6px */
    letter-spacing: -1.92px;
    margin: 5%;
    /* Xóa margin mặc định của thẻ h1 */
}

/* ✨ [MỚI] Style cho đoạn tagline */
.time-tagline {
    color: #000;
    text-align: center;
    font-family: "BT-BeauSans-Regular-ttf", sans-serif;
    /* Thêm "sans-serif" làm font dự phòng */
    font-size: 16px;
    font-style: normal;
    font-weight: 400;
    line-height: 120%;
    /* 19.2px, tăng nhẹ để dễ đọc hơn */
    margin: 5%;
}

/* ✨ [MỚI] Style cho đoạn mô tả chi tiết */
.time-description {
    color: #797979;
    text-align: center;
    font-family: "BT-BeauSans-Regular-ttf", sans-serif;
    font-size: 16px;
    font-style: normal;
    font-weight: 400;
    line-height: 120%;
    /* 19.2px */
    margin: 5%;
    width: 100%;
}

/*
 * Ghi chú: `leading-trim` và `text-edge` là các thuộc tính CSS chưa được hỗ trợ rộng rãi,
 * vì vậy tôi đã bỏ qua chúng nhưng vẫn đảm bảo bố cục trực quan đúng như yêu cầu.
 */


/* Keyframe cho hiệu ứng xuất hiện của nội dung */
@keyframes fadeInContent {
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* ✨ [MỚI] Responsive cho thiết bị di động */
@media (max-width: 768px) {
    .time-overlay-content {
        gap: 1.5rem;
        padding: 1rem;
        max-width: 90%;
    }

    .time-title {
        font-size: 48px;
        /* Giảm kích thước font cho màn hình nhỏ */
    }

    .time-tagline,
    .time-description {
        font-size: 14px;
        /* Giảm kích thước font cho màn hình nhỏ */
        line-height: 130%;
    }
}

=== TimeOverlay.jsx ===
// ============================================================= //
//                    TimeOverlay.jsx (UPDATED)                  //
// ============================================================= //
import React from 'react'; // Bỏ import useEffect vì không còn dùng
import BaseOverlay from './BaseOverlay';
import './TimeOverlay.css';

const TimeOverlay = ({ isActive, overlayStyle, onClose }) => {

    // ✨ Đoạn code xử lý phím Escape đã được XÓA BỎ ✨

    return (
        <BaseOverlay
            isActive={isActive}
            overlayStyle={overlayStyle}
            onClose={onClose}
            disableDefaultClose={true}
            customClassName="time-overlay-theme"
            closeOnMouseLeave={true} // ✨ BẬT TÍNH NĂNG: Đóng khi di chuột ra ngoài
        >
            <div className="time-overlay-content">
                <h1 className="time-title">Time</h1>
                <p className="time-tagline">
                    Mirror is not a fleeting trend<br />- it's designed to grow with you
                </p>
                <p className="time-description">
                    From anticipation to aftercare, we're there for every moment:
                    <br />
                    the ordinary, the rare, the timeless.
                    <br />
                    Each experience becomes more personal, more lasting
                    <br />
                    - like the bond between you and what you wear.
                </p>
            </div>
        </BaseOverlay>
    );
};

export default TimeOverlay;

=== UniverseSection.css ===
/* UniverseSection.css - Enhanced Version */

/* SECTION 1: KHUNG CẢNH VŨ TRỤ */
.universe-section {
    width: 100%;
    height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
    overflow: hidden;
    /* Ảnh nền vũ trụ */
    background-color: #0b020a;
    background-image:
        url('/universe/universe_background_image.webp'),
        url('/universe/universe_background_image.png'),
        url('/universe/universe_background_image.jpg'),
        radial-gradient(circle at center, #4a1a3d 0%, #2d1024 40%, #1a0a14 70%, #000000 100%);
    background-size: cover;
    background-position: center center;
    background-repeat: no-repeat;
    background-attachment: fixed;
}

.universe-container {
    position: relative;
    width: 50vmin;
    height: 50vmin;
    max-width: 560px;
    max-height: 560px;
    min-width: 280px;
    min-height: 280px;
    display: flex;
    justify-content: center;
    align-items: center;
}

/* SECTION 2: HỆ THỐNG QUỸ ĐẠO VÀ VÒNG TRÒN TRUNG TÂM */
.orbit-system {
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
}

.orbit-ring {
    position: absolute;
    border: 2px dashed rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    /* Thêm hiệu ứng phát sáng cho quỹ đạo */
    box-shadow:
        0 0 10px rgba(255, 255, 255, 0.1),
        inset 0 0 10px rgba(255, 255, 255, 0.05);
}

.orbit-ring-1 {
    width: 30%;
    height: 30%;
}

.orbit-ring-2 {
    width: 42%;
    height: 42%;
}

.orbit-ring-3 {
    width: 54%;
    height: 54%;
}

.orbit-ring-4 {
    width: 66%;
    height: 66%;
}

.orbit-ring-5 {
    width: 78%;
    height: 78%;
}

.center-circle {
    position: absolute;
    width: 20%;
    height: 20%;
    min-width: 90px;
    min-height: 90px;
    max-width: 180px;
    max-height: 180px;
    background: white;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 10;
    box-shadow:
        0 0 40px rgba(255, 255, 255, 0.3),
        0 0 80px rgba(255, 255, 255, 0.1);
    container-type: inline-size;
    container-name: circle-container;
    /* Hiệu ứng nhấp nháy nhẹ */
    animation: center-glow 4s ease-in-out infinite;
}

@keyframes center-glow {

    0%,
    100% {
        box-shadow:
            0 0 40px rgba(255, 255, 255, 0.3),
            0 0 80px rgba(255, 255, 255, 0.1);
    }

    50% {
        box-shadow:
            0 0 60px rgba(255, 255, 255, 0.4),
            0 0 120px rgba(255, 255, 255, 0.2);
    }
}

.center-text {
    font-family: 'BT-BeauSans-Regular-ttf', sans-serif;
    font-size: clamp(0.5rem, 18cqw, 0.8rem);
    font-weight: 400;
    color: #333;
    text-align: center;
    line-height: 1.2;
    letter-spacing: 0.5px;
    padding: 8px;
}

/* SECTION 3: HÀNH TINH XÁM VÀ CHUYỂN ĐỘNG NÂNG CAP */

/* Style cơ bản cho hành tinh */
.planet {
    position: absolute;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    /* Kích thước được xác định bởi biến CSS --planet-size */
    width: var(--planet-size, 12px);
    height: var(--planet-size, 12px);
    cursor: pointer;
}

/* Style nâng cao cho hành tinh xám */
.gray-planet {
    background: linear-gradient(135deg, #b8b8b8 0%, #666666 50%, #999999 100%);
    box-shadow:
        0 0 15px rgba(255, 255, 255, 0.3),
        0 0 30px rgba(184, 184, 184, 0.2),
        inset -2px -2px 4px rgba(0, 0, 0, 0.3),
        inset 1px 1px 2px rgba(255, 255, 255, 0.4);
    position: relative;
    overflow: hidden;

    /* Hiệu ứng nhấp nháy */
    animation: planet-pulse var(--pulse-duration, 3s) ease-in-out infinite;
}

/* Thêm hiệu ứng phản chiếu ánh sáng */
.gray-planet::before {
    content: '';
    position: absolute;
    top: 15%;
    left: 20%;
    width: 30%;
    height: 30%;
    background: radial-gradient(circle, rgba(255, 255, 255, 0.8) 0%, transparent 70%);
    border-radius: 50%;
    pointer-events: none;
}

/* Hiệu ứng đuôi sáng */
.gray-planet::after {
    content: '';
    position: absolute;
    width: 200%;
    height: 2px;
    background: linear-gradient(90deg,
            transparent 0%,
            rgba(255, 255, 255, 0.3) 20%,
            rgba(184, 184, 184, 0.6) 50%,
            transparent 100%);
    top: 50%;
    left: -100%;
    transform: translateY(-50%);
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
}

.gray-planet:hover {
    transform: scale(1.5);
    box-shadow:
        0 0 25px rgba(255, 255, 255, 0.6),
        0 0 50px rgba(184, 184, 184, 0.4),
        inset -2px -2px 4px rgba(0, 0, 0, 0.3),
        inset 1px 1px 2px rgba(255, 255, 255, 0.6);
    animation-play-state: paused;
}

.gray-planet:hover::after {
    opacity: 1;
}

/* Keyframes cho hiệu ứng nhấp nháy */
@keyframes planet-pulse {

    0%,
    100% {
        box-shadow:
            0 0 15px rgba(255, 255, 255, 0.3),
            0 0 30px rgba(184, 184, 184, 0.2),
            inset -2px -2px 4px rgba(0, 0, 0, 0.3),
            inset 1px 1px 2px rgba(255, 255, 255, 0.4);
    }

    50% {
        box-shadow:
            0 0 20px rgba(255, 255, 255, 0.5),
            0 0 40px rgba(184, 184, 184, 0.3),
            inset -2px -2px 4px rgba(0, 0, 0, 0.3),
            inset 1px 1px 2px rgba(255, 255, 255, 0.6);
    }
}

/* ✨ [THAY ĐỔI] Đơn giản hóa keyframe, vì timing function sẽ được đặt trong rule `.planet.animated` */
@keyframes move-on-path {
    from {
        offset-distance: 0%;
    }

    to {
        offset-distance: 100%;
    }
}

/* Xóa keyframe 'move-with-variation' không cần thiết nữa */


/* Class áp dụng animation cho hành tinh */
.planet.animated {
    /* offset-path xác định đường đi hình tròn */
    offset-path: circle(var(--orbit-radius) at center);
    offset-rotate: 0deg;

    /* ✨ [THAY ĐỔI] Áp dụng animation với timing là 'linear' để chuyển động đều ✨ */
    animation:
        move-on-path var(--orbit-duration) linear infinite var(--orbit-direction),
        planet-pulse var(--pulse-duration, 3s) ease-in-out infinite;

    /* Thêm hiệu ứng chuyển đổi mượt mà */
    transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

/* Hiệu ứng đặc biệt cho từng hành tinh */
.planet.animated:nth-child(6) {
    --pulse-duration: 2.5s;
    filter: hue-rotate(0deg);
}

.planet.animated:nth-child(7) {
    --pulse-duration: 3.2s;
    filter: hue-rotate(20deg);
}

.planet.animated:nth-child(8) {
    --pulse-duration: 2.8s;
    filter: hue-rotate(40deg);
}

.planet.animated:nth-child(9) {
    --pulse-duration: 3.5s;
    filter: hue-rotate(60deg);
}

.planet.animated:nth-child(10) {
    --pulse-duration: 2.3s;
    filter: hue-rotate(80deg);
}

/* SECTION 4: RESPONSIVE DESIGN */
@media (max-width: 768px) {
    .universe-container {
        width: 80vmin;
        height: 80vmin;
        min-width: 240px;
        min-height: 240px;
    }

    .center-circle {
        min-width: 70px;
        min-height: 70px;
        max-width: 120px;
        max-height: 120px;
    }

    .center-text {
        font-size: clamp(0.4rem, 16cqw, 0.6rem);
        padding: 6px;
    }

    .gray-planet:hover {
        transform: scale(1.3);
    }
}

@media (max-width: 480px) {
    .universe-container {
        width: 90vmin;
        height: 90vmin;
        min-width: 200px;
        min-height: 200px;
    }

    .center-circle {
        min-width: 60px;
        min-height: 60px;
        max-width: 100px;
        max-height: 100px;
    }

    .center-text {
        font-size: clamp(0.35rem, 14cqw, 0.5rem);
        padding: 4px;
    }

    .orbit-ring {
        border-width: 1px;
    }

    .gray-planet:hover {
        transform: scale(1.2);
    }
}

/* SECTION 5: ANIMATION PERFORMANCE */
.orbit-system * {
    will-change: transform, filter, box-shadow;
}

.planet.animated {
    transform-origin: center;
    backface-visibility: hidden;
    -webkit-backface-visibility: hidden;
    transform-style: preserve-3d;
}

/* SECTION 6: ACCESSIBILITY */
@media (prefers-reduced-motion: reduce) {
    .planet.animated {
        animation-duration: 60s;
        /* Vẫn giữ linear cho người dùng muốn chuyển động chậm hơn, không giật cục */
        animation-timing-function: linear;
    }

    .planet:hover,
    .gray-planet:hover {
        transform: scale(1.1);
    }

    .center-circle {
        animation: none;
    }

    @keyframes planet-pulse {

        0%,
        100% {
            box-shadow:
                0 0 15px rgba(255, 255, 255, 0.3),
                0 0 30px rgba(184, 184, 184, 0.2);
        }
    }
}

/* SECTION 7: HIGH DPI DISPLAYS */
@media (-webkit-min-device-pixel-ratio: 2),
(min-resolution: 192dpi) {
    .orbit-ring {
        border-width: 1px;
    }

    .center-circle {
        box-shadow:
            0 0 40px rgba(255, 255, 255, 0.3),
            0 0 80px rgba(255, 255, 255, 0.1);
    }

    .gray-planet {
        box-shadow:
            0 0 12px rgba(255, 255, 255, 0.3),
            0 0 24px rgba(184, 184, 184, 0.2),
            inset -1px -1px 2px rgba(0, 0, 0, 0.3),
            inset 1px 1px 1px rgba(255, 255, 255, 0.4);
    }
}

=== UniverseSection.jsx ===
// UniverseSection.jsx - Enhanced Version with Even Distribution
import React, { useState, useEffect } from 'react';
import './UniverseSection.css';
import WhitePlanet from './WhitePlanet';
import SpaceOverlay from './SpaceOverlay';
import BaseOverlay from './BaseOverlay';
import PresenceOverlay from './PresenceOverlay';
import TimeOverlay from './TimeOverlay';
import SensesOverlay from './SensesOverlay';

const UniverseSection = () => {
    const orbitRadii = { 1: '15.2%', 2: '21%', 3: '27.5%', 4: '33.2%', 5: '39%' };

    const whitePlanetsData = [
        { name: 'Presence', orbitRing: 2, angle: '-2deg', size: 'clamp(12px, 1vw, 16px)' },
        { name: 'Senses', orbitRing: 3, angle: '235deg', size: 'clamp(20px, 1.5vw, 30px)' },
        { name: 'Time', orbitRing: 4, angle: '145deg', size: 'clamp(14px, 1.2vw, 20px)' },
        { name: 'Space', orbitRing: 5, angle: '55deg', size: 'clamp(10px, 0.9vw, 14px)' },
    ];

    const BASE_SPEED = 15;
    const SPEED_INCREMENT = 4;
    const grayPlanetResponsiveSize = 'clamp(10px, 1.1vw, 16px)';

    const grayPlanets = [
        { orbitRing: 1, direction: 'clockwise', pulseDuration: '2.5s', color: 'default' },
        { orbitRing: 2, direction: 'counter-clockwise', pulseDuration: '3.0s', color: 'blue-tint' },
        { orbitRing: 3, direction: 'clockwise', pulseDuration: '2.8s', color: 'purple-tint' },
        { orbitRing: 4, direction: 'counter-clockwise', pulseDuration: '3.2s', color: 'green-tint' },
        { orbitRing: 5, direction: 'clockwise', pulseDuration: '2.3s', color: 'orange-tint' }
    ];

    const [activePlanet, setActivePlanet] = useState(null);
    const [overlayStyle, setOverlayStyle] = useState({});

    const handlePlanetClick = (event, planetName) => {
        const rect = event.currentTarget.getBoundingClientRect();
        setOverlayStyle({
            top: `${rect.top}px`,
            left: `${rect.left}px`,
            width: `${rect.width}px`,
            height: `${rect.height}px`,
        });
        if (planetName.toLowerCase() === 'space') {
            setActivePlanet('space');
        }
        else if (planetName.toLowerCase() === 'presence') {
            setActivePlanet('presence');
        }
        else if (planetName.toLowerCase() === 'time') {
            setActivePlanet('time');
        }
        else if (planetName.toLowerCase() === 'senses') {
            setActivePlanet('senses');
        }
    };

    const closeOverlay = () => {
        setActivePlanet(null);
    };

    // ✨ =================================================================== ✨
    // ✨                        THÊM LOGIC XỬ LÝ ESCAPE                      ✨
    // ✨ =================================================================== ✨
    useEffect(() => {
        // Định nghĩa hàm xử lý sự kiện keydown
        const handleKeyDown = (event) => {
            // Kiểm tra nếu phím được nhấn là 'Escape'
            if (event.key === 'Escape') {
                closeOverlay(); // Gọi hàm đóng overlay
            }
        };

        // Thêm event listener vào document khi component được mount
        document.addEventListener('keydown', handleKeyDown);

        // Hàm dọn dẹp: Xóa event listener khi component unmount
        // Điều này cực kỳ quan trọng để tránh memory leaks.
        return () => {
            document.removeEventListener('keydown', handleKeyDown);
        };
    }, []); // Mảng rỗng `[]` đảm bảo effect này chỉ chạy một lần khi component mount.
    // ✨ =================================================================== ✨

    return (
        <div className="universe-section">
            <div className="universe-container">
                <div className="orbit-system">
                    <div className="orbit-ring orbit-ring-1"></div>
                    <div className="orbit-ring orbit-ring-2"></div>
                    <div className="orbit-ring orbit-ring-3"></div>
                    <div className="orbit-ring orbit-ring-4"></div>
                    <div className="orbit-ring orbit-ring-5"></div>

                    <WhitePlanet
                        planets={whitePlanetsData}
                        orbitRadii={orbitRadii}
                        onPlanetClick={handlePlanetClick}
                    />

                    {grayPlanets.map((planet, index) => {
                        const speed = BASE_SPEED + (planet.orbitRing - 1) * SPEED_INCREMENT;
                        const directionValue = planet.direction === 'clockwise' ? 'reverse' : 'normal';

                        // ✨ [THAY ĐỔI] Tính toán delay âm để rải đều các hành tinh ✨
                        // Logic: Chia vòng tròn cho số hành tinh và đặt vị trí bắt đầu bằng delay âm.
                        const startOffsetDelay = - (speed * (index / grayPlanets.length));

                        const planetStyle = {
                            '--orbit-radius': orbitRadii[planet.orbitRing],
                            '--orbit-duration': `${speed}s`,
                            '--orbit-direction': directionValue,
                            '--planet-size': grayPlanetResponsiveSize,
                            '--pulse-duration': planet.pulseDuration,
                            // Áp dụng delay âm
                            animationDelay: `${startOffsetDelay}s`,
                        };

                        return (
                            <div
                                key={`gray-${index}`}
                                className={`planet gray-planet animated ${planet.color}`}
                                style={planetStyle}
                                title={`Gray Planet ${index + 1}`}
                            ></div>
                        );
                    })}

                    <div className="center-circle">
                        <div className="center-text">MIRROR<br />EXPERIENCE</div>
                    </div>
                </div>
            </div>

            <PresenceOverlay
                isActive={activePlanet === 'presence'}
                overlayStyle={overlayStyle}
                onClose={closeOverlay}
            />

            <SpaceOverlay
                isActive={activePlanet === 'space'}
                overlayStyle={overlayStyle}
                onClose={closeOverlay}
            />

            <TimeOverlay
                isActive={activePlanet === 'time'}
                overlayStyle={overlayStyle}
                onClose={closeOverlay}
            />

            <SensesOverlay
                isActive={activePlanet === 'senses'}
                overlayStyle={overlayStyle}
                onClose={closeOverlay}
            />


            {/* <BaseOverlay
                isActive={activePlanet === 'space'}
                overlayStyle={overlayStyle}
                onClose={closeOverlay}
            /> */}
        </div>
    );
};

export default UniverseSection;

=== WhitePlanet.css ===
/* WhitePlanet.css - CẬP NHẬT HIỆU ỨNG SÁNG "TƯƠI" HƠN */

/* ✨ CẬP NHẬT: Tăng cường độ sáng và độ lan tỏa của vầng hào quang */
@keyframes pulse-glow {
    0% {
        /* Trạng thái nghỉ, vẫn có vầng sáng rõ rệt */
        box-shadow:
            0 0 8px rgba(255, 255, 255, 1),
            /* Lớp trong cùng sáng rõ */
            0 0 20px rgba(255, 255, 255, 0.9),
            0 0 45px rgba(220, 180, 235, 0.7),
            /* Ánh tím nhẹ lan rộng */
            0 0 70px rgba(200, 150, 220, 0.5);
    }

    50% {
        /* Trạng thái sáng nhất, hào quang rực rỡ và lan rộng */
        box-shadow:
            0 0 12px rgba(255, 255, 255, 1),
            0 0 35px rgba(255, 255, 255, 1),
            /* Lớp trắng thứ hai cực sáng và rộng */
            0 0 65px rgba(220, 180, 235, 0.8),
            /* Ánh tím mạnh hơn */
            0 0 100px rgba(200, 150, 220, 0.6);
        /* Vầng sáng ngoài cùng lan rất xa */
    }

    100% {
        /* Quay trở lại trạng thái nghỉ */
        box-shadow:
            0 0 8px rgba(255, 255, 255, 1),
            0 0 20px rgba(255, 255, 255, 0.9),
            0 0 45px rgba(220, 180, 235, 0.7),
            0 0 70px rgba(200, 150, 220, 0.5);
    }
}

.white-planet {
    background: #fff;
    border-radius: 50%;
    z-index: 5;
    cursor: pointer;

    display: flex;
    justify-content: center;
    align-items: center;
    transform: translate(-50%, -50%);

    /* Áp dụng animation đã được làm sáng hơn */
    animation: pulse-glow 4s infinite ease-in-out;
    transition: transform 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
}

.white-planet:hover {
    animation-play-state: paused;
    transform: translate(-50%, -50%) scale(1.15);
    z-index: 6;
}

/* Phần label giữ nguyên không đổi */
.planet-label {
    position: absolute;
    bottom: calc(100% + 12px);
    left: 50%;
    transform: translateX(-50%);
    font-family: 'BT-BeauSans-Regular-ttf', sans-serif;
    font-size: clamp(0.6rem, 1.5vmin, 0.8rem);
    font-weight: 500;
    color: white;
    letter-spacing: 1px;
    text-shadow: 0 0 5px #fff, 0 0 10px #aaa;
    white-space: nowrap;
    background: rgba(0, 0, 0, 0.4);
    padding: 4px 10px;
    border-radius: 5px;
    text-shadow:
        /* Lớp 1: Vầng sáng trắng mạnh, sát chữ */
        0 0 7px rgba(255, 255, 255, 1),
        /* Lớp 2: Vầng sáng trắng lan tỏa rộng hơn */
        0 0 15px rgba(255, 255, 255, 0.8),
        /* Lớp 3: Thêm ánh tím nhẹ để đồng bộ với hành tinh */
        0 0 25px rgba(220, 180, 235, 0.7);
    opacity: 0;
    visibility: hidden;
    pointer-events: none;
    transition: opacity 0.3s ease-out, visibility 0.3s ease-out;
}

.white-planet:hover .planet-label {
    opacity: 1;
    visibility: visible;
}

=== WhitePlanet.jsx ===
// WhitePlanet.jsx

import React from 'react';
import './WhitePlanet.css';

const WhitePlanet = ({ planets, orbitRadii, onPlanetClick }) => {
    return (
        <>
            {planets.map((planet) => {
                const radiusString = orbitRadii[planet.orbitRing];
                if (!radiusString) return null;

                const radiusValue = parseFloat(radiusString);

                // Dùng parseFloat để lấy số từ chuỗi angle (ví dụ: '89deg' -> 89)
                const angleInDegrees = parseFloat(planet.angle);

                // Chuyển đổi góc từ độ sang radian để tính toán
                const angleInRad = (angleInDegrees * Math.PI) / 180;

                // Tính toán vị trí x và y
                const x = radiusValue * Math.cos(angleInRad);
                const y = radiusValue * Math.sin(angleInRad);

                // Tạo style inline để định vị hành tinh
                // Sử dụng 'width' và 'height' thay vì biến CSS để đảm bảo tính nhất quán
                const planetStyle = {
                    left: `calc(50% + ${x}%)`,
                    top: `calc(50% + ${y}%)`,
                    width: planet.size,
                    height: planet.size,
                };

                return (
                    <div
                        key={planet.name}
                        className="planet white-planet" // Bỏ 'clickable' nếu không dùng style riêng
                        style={planetStyle}
                        onClick={(e) => onPlanetClick && onPlanetClick(e, planet.name)}
                    >
                        <span className="planet-label">{planet.name}</span>
                    </div>
                );
            })}
        </>
    );
};

export default WhitePlanet;